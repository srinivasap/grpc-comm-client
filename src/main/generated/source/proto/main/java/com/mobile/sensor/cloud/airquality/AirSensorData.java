// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: airqualitysensor.proto

package com.mobile.sensor.cloud.airquality;

/**
 * <pre>
 * model representing sensor data
 * </pre>
 *
 * Protobuf type {@code AirSensorData}
 */
public  final class AirSensorData extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:AirSensorData)
    AirSensorDataOrBuilder {
private static final long serialVersionUID = 0L;
  // Use AirSensorData.newBuilder() to construct.
  private AirSensorData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private AirSensorData() {
    pressure_ = 0F;
    temparature_ = 0F;
    windspeed_ = 0F;
    recordedTime_ = "";
    state_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private AirSensorData(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder subBuilder = null;
            if (sensorDetails_ != null) {
              subBuilder = sensorDetails_.toBuilder();
            }
            sensorDetails_ = input.readMessage(com.mobile.sensor.cloud.airquality.AirSensorDetails.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(sensorDetails_);
              sensorDetails_ = subBuilder.buildPartial();
            }

            break;
          }
          case 21: {

            pressure_ = input.readFloat();
            break;
          }
          case 29: {

            temparature_ = input.readFloat();
            break;
          }
          case 37: {

            windspeed_ = input.readFloat();
            break;
          }
          case 42: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              parameters_ = com.google.protobuf.MapField.newMapField(
                  ParametersDefaultEntryHolder.defaultEntry);
              mutable_bitField0_ |= 0x00000010;
            }
            com.google.protobuf.MapEntry<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
            parameters__ = input.readMessage(
                ParametersDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
            parameters_.getMutableMap().put(
                parameters__.getKey(), parameters__.getValue());
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            recordedTime_ = s;
            break;
          }
          case 56: {
            int rawValue = input.readEnum();

            state_ = rawValue;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 5:
        return internalGetParameters();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.mobile.sensor.cloud.airquality.AirSensorData.class, com.mobile.sensor.cloud.airquality.AirSensorData.Builder.class);
  }

  /**
   * Protobuf enum {@code AirSensorData.State}
   */
  public enum State
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>G = 0;</code>
     */
    G(0),
    /**
     * <code>Y = 1;</code>
     */
    Y(1),
    /**
     * <code>R = 2;</code>
     */
    R(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>G = 0;</code>
     */
    public static final int G_VALUE = 0;
    /**
     * <code>Y = 1;</code>
     */
    public static final int Y_VALUE = 1;
    /**
     * <code>R = 2;</code>
     */
    public static final int R_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static State valueOf(int value) {
      return forNumber(value);
    }

    public static State forNumber(int value) {
      switch (value) {
        case 0: return G;
        case 1: return Y;
        case 2: return R;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<State>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        State> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<State>() {
            public State findValueByNumber(int number) {
              return State.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.mobile.sensor.cloud.airquality.AirSensorData.getDescriptor().getEnumTypes().get(0);
    }

    private static final State[] VALUES = values();

    public static State valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private State(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:AirSensorData.State)
  }

  private int bitField0_;
  public static final int SENSORDETAILS_FIELD_NUMBER = 1;
  private com.mobile.sensor.cloud.airquality.AirSensorDetails sensorDetails_;
  /**
   * <code>.AirSensorDetails sensorDetails = 1;</code>
   */
  public boolean hasSensorDetails() {
    return sensorDetails_ != null;
  }
  /**
   * <code>.AirSensorDetails sensorDetails = 1;</code>
   */
  public com.mobile.sensor.cloud.airquality.AirSensorDetails getSensorDetails() {
    return sensorDetails_ == null ? com.mobile.sensor.cloud.airquality.AirSensorDetails.getDefaultInstance() : sensorDetails_;
  }
  /**
   * <code>.AirSensorDetails sensorDetails = 1;</code>
   */
  public com.mobile.sensor.cloud.airquality.AirSensorDetailsOrBuilder getSensorDetailsOrBuilder() {
    return getSensorDetails();
  }

  public static final int PRESSURE_FIELD_NUMBER = 2;
  private float pressure_;
  /**
   * <code>float pressure = 2;</code>
   */
  public float getPressure() {
    return pressure_;
  }

  public static final int TEMPARATURE_FIELD_NUMBER = 3;
  private float temparature_;
  /**
   * <code>float temparature = 3;</code>
   */
  public float getTemparature() {
    return temparature_;
  }

  public static final int WINDSPEED_FIELD_NUMBER = 4;
  private float windspeed_;
  /**
   * <code>float windspeed = 4;</code>
   */
  public float getWindspeed() {
    return windspeed_;
  }

  public static final int PARAMETERS_FIELD_NUMBER = 5;
  private static final class ParametersDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>newDefaultInstance(
                com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_ParametersEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.mobile.sensor.cloud.airquality.AirParameter.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> parameters_;
  private com.google.protobuf.MapField<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
  internalGetParameters() {
    if (parameters_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          ParametersDefaultEntryHolder.defaultEntry);
    }
    return parameters_;
  }

  public int getParametersCount() {
    return internalGetParameters().getMap().size();
  }
  /**
   * <pre>
   * value and parameter type
   * </pre>
   *
   * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
   */

  public boolean containsParameters(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetParameters().getMap().containsKey(key);
  }
  /**
   * Use {@link #getParametersMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> getParameters() {
    return getParametersMap();
  }
  /**
   * <pre>
   * value and parameter type
   * </pre>
   *
   * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
   */

  public java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> getParametersMap() {
    return internalGetParameters().getMap();
  }
  /**
   * <pre>
   * value and parameter type
   * </pre>
   *
   * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
   */

  public com.mobile.sensor.cloud.airquality.AirParameter getParametersOrDefault(
      java.lang.String key,
      com.mobile.sensor.cloud.airquality.AirParameter defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> map =
        internalGetParameters().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * value and parameter type
   * </pre>
   *
   * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
   */

  public com.mobile.sensor.cloud.airquality.AirParameter getParametersOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> map =
        internalGetParameters().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int RECORDEDTIME_FIELD_NUMBER = 6;
  private volatile java.lang.Object recordedTime_;
  /**
   * <code>string recordedTime = 6;</code>
   */
  public java.lang.String getRecordedTime() {
    java.lang.Object ref = recordedTime_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      recordedTime_ = s;
      return s;
    }
  }
  /**
   * <code>string recordedTime = 6;</code>
   */
  public com.google.protobuf.ByteString
      getRecordedTimeBytes() {
    java.lang.Object ref = recordedTime_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      recordedTime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STATE_FIELD_NUMBER = 7;
  private int state_;
  /**
   * <code>.AirSensorData.State state = 7;</code>
   */
  public int getStateValue() {
    return state_;
  }
  /**
   * <code>.AirSensorData.State state = 7;</code>
   */
  public com.mobile.sensor.cloud.airquality.AirSensorData.State getState() {
    com.mobile.sensor.cloud.airquality.AirSensorData.State result = com.mobile.sensor.cloud.airquality.AirSensorData.State.valueOf(state_);
    return result == null ? com.mobile.sensor.cloud.airquality.AirSensorData.State.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (sensorDetails_ != null) {
      output.writeMessage(1, getSensorDetails());
    }
    if (pressure_ != 0F) {
      output.writeFloat(2, pressure_);
    }
    if (temparature_ != 0F) {
      output.writeFloat(3, temparature_);
    }
    if (windspeed_ != 0F) {
      output.writeFloat(4, windspeed_);
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetParameters(),
        ParametersDefaultEntryHolder.defaultEntry,
        5);
    if (!getRecordedTimeBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, recordedTime_);
    }
    if (state_ != com.mobile.sensor.cloud.airquality.AirSensorData.State.G.getNumber()) {
      output.writeEnum(7, state_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (sensorDetails_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getSensorDetails());
    }
    if (pressure_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(2, pressure_);
    }
    if (temparature_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(3, temparature_);
    }
    if (windspeed_ != 0F) {
      size += com.google.protobuf.CodedOutputStream
        .computeFloatSize(4, windspeed_);
    }
    for (java.util.Map.Entry<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> entry
         : internalGetParameters().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
      parameters__ = ParametersDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, parameters__);
    }
    if (!getRecordedTimeBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, recordedTime_);
    }
    if (state_ != com.mobile.sensor.cloud.airquality.AirSensorData.State.G.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(7, state_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.mobile.sensor.cloud.airquality.AirSensorData)) {
      return super.equals(obj);
    }
    com.mobile.sensor.cloud.airquality.AirSensorData other = (com.mobile.sensor.cloud.airquality.AirSensorData) obj;

    boolean result = true;
    result = result && (hasSensorDetails() == other.hasSensorDetails());
    if (hasSensorDetails()) {
      result = result && getSensorDetails()
          .equals(other.getSensorDetails());
    }
    result = result && (
        java.lang.Float.floatToIntBits(getPressure())
        == java.lang.Float.floatToIntBits(
            other.getPressure()));
    result = result && (
        java.lang.Float.floatToIntBits(getTemparature())
        == java.lang.Float.floatToIntBits(
            other.getTemparature()));
    result = result && (
        java.lang.Float.floatToIntBits(getWindspeed())
        == java.lang.Float.floatToIntBits(
            other.getWindspeed()));
    result = result && internalGetParameters().equals(
        other.internalGetParameters());
    result = result && getRecordedTime()
        .equals(other.getRecordedTime());
    result = result && state_ == other.state_;
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasSensorDetails()) {
      hash = (37 * hash) + SENSORDETAILS_FIELD_NUMBER;
      hash = (53 * hash) + getSensorDetails().hashCode();
    }
    hash = (37 * hash) + PRESSURE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getPressure());
    hash = (37 * hash) + TEMPARATURE_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getTemparature());
    hash = (37 * hash) + WINDSPEED_FIELD_NUMBER;
    hash = (53 * hash) + java.lang.Float.floatToIntBits(
        getWindspeed());
    if (!internalGetParameters().getMap().isEmpty()) {
      hash = (37 * hash) + PARAMETERS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetParameters().hashCode();
    }
    hash = (37 * hash) + RECORDEDTIME_FIELD_NUMBER;
    hash = (53 * hash) + getRecordedTime().hashCode();
    hash = (37 * hash) + STATE_FIELD_NUMBER;
    hash = (53 * hash) + state_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.mobile.sensor.cloud.airquality.AirSensorData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.mobile.sensor.cloud.airquality.AirSensorData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * model representing sensor data
   * </pre>
   *
   * Protobuf type {@code AirSensorData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:AirSensorData)
      com.mobile.sensor.cloud.airquality.AirSensorDataOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 5:
          return internalGetMutableParameters();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.mobile.sensor.cloud.airquality.AirSensorData.class, com.mobile.sensor.cloud.airquality.AirSensorData.Builder.class);
    }

    // Construct using com.mobile.sensor.cloud.airquality.AirSensorData.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      if (sensorDetailsBuilder_ == null) {
        sensorDetails_ = null;
      } else {
        sensorDetails_ = null;
        sensorDetailsBuilder_ = null;
      }
      pressure_ = 0F;

      temparature_ = 0F;

      windspeed_ = 0F;

      internalGetMutableParameters().clear();
      recordedTime_ = "";

      state_ = 0;

      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.mobile.sensor.cloud.airquality.AirQualitySensorProto.internal_static_AirSensorData_descriptor;
    }

    public com.mobile.sensor.cloud.airquality.AirSensorData getDefaultInstanceForType() {
      return com.mobile.sensor.cloud.airquality.AirSensorData.getDefaultInstance();
    }

    public com.mobile.sensor.cloud.airquality.AirSensorData build() {
      com.mobile.sensor.cloud.airquality.AirSensorData result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.mobile.sensor.cloud.airquality.AirSensorData buildPartial() {
      com.mobile.sensor.cloud.airquality.AirSensorData result = new com.mobile.sensor.cloud.airquality.AirSensorData(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (sensorDetailsBuilder_ == null) {
        result.sensorDetails_ = sensorDetails_;
      } else {
        result.sensorDetails_ = sensorDetailsBuilder_.build();
      }
      result.pressure_ = pressure_;
      result.temparature_ = temparature_;
      result.windspeed_ = windspeed_;
      result.parameters_ = internalGetParameters();
      result.parameters_.makeImmutable();
      result.recordedTime_ = recordedTime_;
      result.state_ = state_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.mobile.sensor.cloud.airquality.AirSensorData) {
        return mergeFrom((com.mobile.sensor.cloud.airquality.AirSensorData)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.mobile.sensor.cloud.airquality.AirSensorData other) {
      if (other == com.mobile.sensor.cloud.airquality.AirSensorData.getDefaultInstance()) return this;
      if (other.hasSensorDetails()) {
        mergeSensorDetails(other.getSensorDetails());
      }
      if (other.getPressure() != 0F) {
        setPressure(other.getPressure());
      }
      if (other.getTemparature() != 0F) {
        setTemparature(other.getTemparature());
      }
      if (other.getWindspeed() != 0F) {
        setWindspeed(other.getWindspeed());
      }
      internalGetMutableParameters().mergeFrom(
          other.internalGetParameters());
      if (!other.getRecordedTime().isEmpty()) {
        recordedTime_ = other.recordedTime_;
        onChanged();
      }
      if (other.state_ != 0) {
        setStateValue(other.getStateValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.mobile.sensor.cloud.airquality.AirSensorData parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.mobile.sensor.cloud.airquality.AirSensorData) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private com.mobile.sensor.cloud.airquality.AirSensorDetails sensorDetails_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.mobile.sensor.cloud.airquality.AirSensorDetails, com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder, com.mobile.sensor.cloud.airquality.AirSensorDetailsOrBuilder> sensorDetailsBuilder_;
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public boolean hasSensorDetails() {
      return sensorDetailsBuilder_ != null || sensorDetails_ != null;
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public com.mobile.sensor.cloud.airquality.AirSensorDetails getSensorDetails() {
      if (sensorDetailsBuilder_ == null) {
        return sensorDetails_ == null ? com.mobile.sensor.cloud.airquality.AirSensorDetails.getDefaultInstance() : sensorDetails_;
      } else {
        return sensorDetailsBuilder_.getMessage();
      }
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public Builder setSensorDetails(com.mobile.sensor.cloud.airquality.AirSensorDetails value) {
      if (sensorDetailsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sensorDetails_ = value;
        onChanged();
      } else {
        sensorDetailsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public Builder setSensorDetails(
        com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder builderForValue) {
      if (sensorDetailsBuilder_ == null) {
        sensorDetails_ = builderForValue.build();
        onChanged();
      } else {
        sensorDetailsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public Builder mergeSensorDetails(com.mobile.sensor.cloud.airquality.AirSensorDetails value) {
      if (sensorDetailsBuilder_ == null) {
        if (sensorDetails_ != null) {
          sensorDetails_ =
            com.mobile.sensor.cloud.airquality.AirSensorDetails.newBuilder(sensorDetails_).mergeFrom(value).buildPartial();
        } else {
          sensorDetails_ = value;
        }
        onChanged();
      } else {
        sensorDetailsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public Builder clearSensorDetails() {
      if (sensorDetailsBuilder_ == null) {
        sensorDetails_ = null;
        onChanged();
      } else {
        sensorDetails_ = null;
        sensorDetailsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder getSensorDetailsBuilder() {
      
      onChanged();
      return getSensorDetailsFieldBuilder().getBuilder();
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    public com.mobile.sensor.cloud.airquality.AirSensorDetailsOrBuilder getSensorDetailsOrBuilder() {
      if (sensorDetailsBuilder_ != null) {
        return sensorDetailsBuilder_.getMessageOrBuilder();
      } else {
        return sensorDetails_ == null ?
            com.mobile.sensor.cloud.airquality.AirSensorDetails.getDefaultInstance() : sensorDetails_;
      }
    }
    /**
     * <code>.AirSensorDetails sensorDetails = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.mobile.sensor.cloud.airquality.AirSensorDetails, com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder, com.mobile.sensor.cloud.airquality.AirSensorDetailsOrBuilder> 
        getSensorDetailsFieldBuilder() {
      if (sensorDetailsBuilder_ == null) {
        sensorDetailsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.mobile.sensor.cloud.airquality.AirSensorDetails, com.mobile.sensor.cloud.airquality.AirSensorDetails.Builder, com.mobile.sensor.cloud.airquality.AirSensorDetailsOrBuilder>(
                getSensorDetails(),
                getParentForChildren(),
                isClean());
        sensorDetails_ = null;
      }
      return sensorDetailsBuilder_;
    }

    private float pressure_ ;
    /**
     * <code>float pressure = 2;</code>
     */
    public float getPressure() {
      return pressure_;
    }
    /**
     * <code>float pressure = 2;</code>
     */
    public Builder setPressure(float value) {
      
      pressure_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float pressure = 2;</code>
     */
    public Builder clearPressure() {
      
      pressure_ = 0F;
      onChanged();
      return this;
    }

    private float temparature_ ;
    /**
     * <code>float temparature = 3;</code>
     */
    public float getTemparature() {
      return temparature_;
    }
    /**
     * <code>float temparature = 3;</code>
     */
    public Builder setTemparature(float value) {
      
      temparature_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float temparature = 3;</code>
     */
    public Builder clearTemparature() {
      
      temparature_ = 0F;
      onChanged();
      return this;
    }

    private float windspeed_ ;
    /**
     * <code>float windspeed = 4;</code>
     */
    public float getWindspeed() {
      return windspeed_;
    }
    /**
     * <code>float windspeed = 4;</code>
     */
    public Builder setWindspeed(float value) {
      
      windspeed_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>float windspeed = 4;</code>
     */
    public Builder clearWindspeed() {
      
      windspeed_ = 0F;
      onChanged();
      return this;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> parameters_;
    private com.google.protobuf.MapField<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
    internalGetParameters() {
      if (parameters_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            ParametersDefaultEntryHolder.defaultEntry);
      }
      return parameters_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
    internalGetMutableParameters() {
      onChanged();;
      if (parameters_ == null) {
        parameters_ = com.google.protobuf.MapField.newMapField(
            ParametersDefaultEntryHolder.defaultEntry);
      }
      if (!parameters_.isMutable()) {
        parameters_ = parameters_.copy();
      }
      return parameters_;
    }

    public int getParametersCount() {
      return internalGetParameters().getMap().size();
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public boolean containsParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetParameters().getMap().containsKey(key);
    }
    /**
     * Use {@link #getParametersMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> getParameters() {
      return getParametersMap();
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> getParametersMap() {
      return internalGetParameters().getMap();
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public com.mobile.sensor.cloud.airquality.AirParameter getParametersOrDefault(
        java.lang.String key,
        com.mobile.sensor.cloud.airquality.AirParameter defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> map =
          internalGetParameters().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public com.mobile.sensor.cloud.airquality.AirParameter getParametersOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> map =
          internalGetParameters().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public Builder clearParameters() {
      internalGetMutableParameters().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public Builder removeParameters(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableParameters().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter>
    getMutableParameters() {
      return internalGetMutableParameters().getMutableMap();
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */
    public Builder putParameters(
        java.lang.String key,
        com.mobile.sensor.cloud.airquality.AirParameter value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      internalGetMutableParameters().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * value and parameter type
     * </pre>
     *
     * <code>map&lt;string, .AirParameter&gt; parameters = 5;</code>
     */

    public Builder putAllParameters(
        java.util.Map<java.lang.String, com.mobile.sensor.cloud.airquality.AirParameter> values) {
      internalGetMutableParameters().getMutableMap()
          .putAll(values);
      return this;
    }

    private java.lang.Object recordedTime_ = "";
    /**
     * <code>string recordedTime = 6;</code>
     */
    public java.lang.String getRecordedTime() {
      java.lang.Object ref = recordedTime_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        recordedTime_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>string recordedTime = 6;</code>
     */
    public com.google.protobuf.ByteString
        getRecordedTimeBytes() {
      java.lang.Object ref = recordedTime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        recordedTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>string recordedTime = 6;</code>
     */
    public Builder setRecordedTime(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      recordedTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>string recordedTime = 6;</code>
     */
    public Builder clearRecordedTime() {
      
      recordedTime_ = getDefaultInstance().getRecordedTime();
      onChanged();
      return this;
    }
    /**
     * <code>string recordedTime = 6;</code>
     */
    public Builder setRecordedTimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      recordedTime_ = value;
      onChanged();
      return this;
    }

    private int state_ = 0;
    /**
     * <code>.AirSensorData.State state = 7;</code>
     */
    public int getStateValue() {
      return state_;
    }
    /**
     * <code>.AirSensorData.State state = 7;</code>
     */
    public Builder setStateValue(int value) {
      state_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.AirSensorData.State state = 7;</code>
     */
    public com.mobile.sensor.cloud.airquality.AirSensorData.State getState() {
      com.mobile.sensor.cloud.airquality.AirSensorData.State result = com.mobile.sensor.cloud.airquality.AirSensorData.State.valueOf(state_);
      return result == null ? com.mobile.sensor.cloud.airquality.AirSensorData.State.UNRECOGNIZED : result;
    }
    /**
     * <code>.AirSensorData.State state = 7;</code>
     */
    public Builder setState(com.mobile.sensor.cloud.airquality.AirSensorData.State value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      state_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.AirSensorData.State state = 7;</code>
     */
    public Builder clearState() {
      
      state_ = 0;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:AirSensorData)
  }

  // @@protoc_insertion_point(class_scope:AirSensorData)
  private static final com.mobile.sensor.cloud.airquality.AirSensorData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.mobile.sensor.cloud.airquality.AirSensorData();
  }

  public static com.mobile.sensor.cloud.airquality.AirSensorData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AirSensorData>
      PARSER = new com.google.protobuf.AbstractParser<AirSensorData>() {
    public AirSensorData parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new AirSensorData(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<AirSensorData> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AirSensorData> getParserForType() {
    return PARSER;
  }

  public com.mobile.sensor.cloud.airquality.AirSensorData getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

